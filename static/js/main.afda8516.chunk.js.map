{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","title","completed","classNames","id","TodoList","todos","map","username","getUserById","userId","usersFromServer","find","renderList","App","useState","hasTitleError","setHasTitleError","setTitle","hasUserError","setHasUserError","selectedUser","setSelectedUser","setTodos","createTodo","Math","max","action","method","onSubmit","event","preventDefault","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.afda8516.chunk.js","sourcesContent":["import { User } from '../../types/User';\nimport './UserInfo.scss';\n\ninterface UserInfoProps {\n  user: User;\n}\n\nexport const UserInfo: React.FC<UserInfoProps> = ({ user }) => {\n  const {\n    name,\n    email,\n  } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\nimport './todoInfo.scss';\n\ninterface TodoInfoProps {\n  todo: Todo;\n}\n\nexport const TodoInfo: React.FC<TodoInfoProps> = ({ todo }) => {\n  const {\n    title,\n    completed,\n    user,\n  } = todo;\n\n  const className = classNames(\n    'TodoInfo',\n    {\n      'TodoInfo--completed': completed,\n    },\n  );\n\n  return (\n    <div\n      data-id={todo.id}\n      className={className}\n    >\n      <article>\n        <h2 className=\"TodoInfo__title\">\n          {title}\n        </h2>\n\n        {user && (\n          <UserInfo user={user} />\n        )}\n      </article>\n    </div>\n  );\n};\n","import { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ninterface TodoListProps {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<TodoListProps> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo\n        key={todo.id}\n        todo={todo}\n      />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import './App.scss';\nimport React, { FormEvent, useState } from 'react';\n\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\n\nfunction getUserById(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nexport const renderList: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App = () => {\n  const [hasTitleError, setHasTitleError] = useState(false);\n  const [title, setTitle] = useState('');\n  const [hasUserError, setHasUserError] = useState(false);\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [todos, setTodos] = useState(renderList);\n\n  const maxId = Math.max(...todos.map((todo) => todo.id));\n\n  const createTodo: Todo = {\n    id: maxId + 1,\n    userId: selectedUser,\n    title,\n    completed: false,\n    user: getUserById(selectedUser),\n  };\n\n  const clearSelection = () => {\n    setSelectedUser(0);\n    setTitle('');\n  };\n\n  const handleUserInput = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setHasUserError(false);\n    setSelectedUser(+event.target.value);\n  };\n\n  const handleTitleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setHasTitleError(false);\n    setTitle(event.target.value);\n  };\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    if (!title) {\n      setHasTitleError(true);\n    }\n\n    if (!selectedUser) {\n      setHasUserError(true);\n    }\n\n    if (title && selectedUser) {\n      setTodos([...todos, createTodo]);\n      clearSelection();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={handleTitleInput}\n          />\n          {hasTitleError && (\n            <span className=\"error\">Please enter a title</span>)}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            placeholder=\"Choose a user\"\n            value={selectedUser}\n            onChange={handleUserInput}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {\n              usersFromServer.map(({ id, name }) => (\n                <option\n                  key={id}\n                  value={id}\n                >\n                  {name}\n                </option>\n              ))\n            }\n          </select>\n          {hasUserError && (\n            <span className=\"error\">Please choose a user</span>)}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}